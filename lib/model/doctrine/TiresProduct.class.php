<?php

/**
 * TiresProduct
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    tires
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class TiresProduct extends BaseTiresProduct
{
    public function updateLuceneIndex()
    {
        $index = TiresProductTable::getLuceneIndex();

//         удалить существующие записи
        foreach ($index->find('pk:'.$this->getuuid() ) as $hit)
        {
            $index->delete($hit);
        }

        // не индексировать истекшие и не активированные вакансии
        if ($this->getactive()==false)
        {
            return;
        }

        $doc = new Zend_Search_Lucene_Document();

        // сохраняем первичный ключ вакансии для идентификации ее в результатах поиска
        $doc->addField(Zend_Search_Lucene_Field::Keyword('pk', $this->getUuid()));

        // индексируем поля вакансии
        $doc->addField(Zend_Search_Lucene_Field::UnStored('name', $this->getname(), 'utf-8'));
        $doc->addField(Zend_Search_Lucene_Field::UnStored('uuid_category', $this->getuuid_category(), 'utf-8'));
        $doc->addField(Zend_Search_Lucene_Field::UnStored('price', $this->getprice(), 'utf-8'));
        $doc->addField(Zend_Search_Lucene_Field::UnStored('active', $this->getactive(), 'utf-8'));
        $doc->addField(Zend_Search_Lucene_Field::UnStored('Fotoname', $this->getFotoname(), 'utf-8'));

        // добавляем работу в индекс
        $index->addDocument($doc);
        $index->commit();
    }

    public function save(Doctrine_Connection $conn = null)
    {
        // ...

//        $conn = $conn ? $conn : TiresProductTable::getConnection();
        $conn = $conn ? $conn : $this->getTable()->getConnection();
        $conn->beginTransaction();
        try
        {
            $ret = parent::save($conn);

            $this->updateLuceneIndex();

            $conn->commit();

            return $ret;
        }
        catch (Exception $e)
        {
            $conn->rollBack();
            throw $e;
        }
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        $index = TiresProductTable::getLuceneIndex();

        foreach ($index->find('pk:'.$this->getuuid()) as $hit)
        {
            $index->delete($hit->uuid);
        }

        return parent::delete($conn);
    }



}